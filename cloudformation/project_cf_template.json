{
    "Parameters": {
        "S3Bucket": {
            "Type": "String",
            "Description": "The name of the S3 bucket to store files"
        },
        "SubnetId": {
            "Type": "AWS::EC2::Subnet::Id",
            "Description": "Subnet ID for the ECS cluster"
        },
        "DownloadWorkerImage": {
            "Type": "String",
            "Description": "ECR image URL for the download worker"
        },
        "TranscriptionLambdaImage": {
            "Type": "String",
            "Description": "ECR image URL for the transcription lambda"
        },
        "WhisperModelPath": {
            "Type": "String",
            "Description": "Path to the Whisper model in transcription lambda directory"
        }
    },
    "Resources": {
        "DownloadQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
                "QueueName": "download-jobs",
                "VisibilityTimeout": 900
            }
        },
        "ApiGatewayRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "apigateway.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "AllowSqsSend",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "sqs:SendMessage",
                                    "Resource": {
                                        "Fn::GetAtt": ["DownloadQueue", "Arn"]
                                    }
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "API": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
                "Name": "TranscriptionAPI",
                "EndpointConfiguration": {
                    "Types": ["REGIONAL"]
                }
            }
        },
        "APIResource": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
                "RestApiId": { "Ref": "API" },
                "ParentId": { "Fn::GetAtt": ["API", "RootResourceId"] },
                "PathPart": "submit"
            }
        },
        "APIMethod": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
                "RestApiId": { "Ref": "API" },
                "ResourceId": { "Ref": "APIResource" },
                "HttpMethod": "POST",
                "AuthorizationType": "AWS_IAM",
                "Integration": {
                    "Type": "AWS",
                    "IntegrationHttpMethod": "POST",
                    "Uri": {
                        "Fn::Sub": "arn:aws:apigateway:${AWS::Region}:sqs:path/${AWS::AccountId}/${DownloadQueue.QueueName}"
                    },
                    "Credentials": {
                        "Fn::GetAtt": ["ApiGatewayRole", "Arn"]
                    },
                    "RequestParameters": {
                        "integration.request.header.Content-Type": "'application/x-www-form-urlencoded'"
                    },
                    "RequestTemplates": {
                        "application/json": {
                        "Fn::Sub": "Action=SendMessage&MessageBody=$util.urlEncode($input.body)"
                        }
                    },
                    "PassthroughBehavior": "NEVER",
                    "IntegrationResponses": [
                        {
                            "StatusCode": "200",
                            "ResponseTemplates": {
                                "application/json": "{ \"message\": \"Download job submitted successfully\" }"
                            }
                        },
                        {
                            "StatusCode": "400",
                            "SelectionPattern": "4\\d{2}",
                            "ResponseTemplates": {
                              "application/json": "{ \"error\": \"Bad request\" }"
                            }
                        },
                        {
                            "StatusCode": "500",
                            "SelectionPattern": "5\\d{2}",
                            "ResponseTemplates": {
                              "application/json": "{ \"error\": \"Internal server error while sending message to SQS\" }"
                            }
                        }
                    ]
                },
                "MethodResponses": [
                    {
                        "StatusCode": "200"
                    },
                    {
                        "StatusCode": "400"
                    },
                    {
                        "StatusCode": "500"
                    }
                ]
            }
        },
        "ApiDeployment": {
            "Type": "AWS::ApiGateway::Deployment",
            "DependsOn": ["APIMethod"],
            "Properties": {
                "RestApiId": { "Ref": "API" },
                "StageName": "prod"
            }
        },
        "ECSCluster": {
            "Type": "AWS::ECS::Cluster",
            "Properties": {
                "ClusterName": "ECSCluster"
            }
        },
        "ECSTaskExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": { "Service": "ecs-tasks.amazonaws.com" },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
                ]
            }
        },
        "ECSTaskRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": { "Service": "ecs-tasks.amazonaws.com" },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "DownloadWorkerPermissions",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:PutObject",
                                        "s3:GetObject",
                                        "s3:ListBucket"
                                    ],
                                    "Resource": [
                                        { "Fn::Sub": "arn:aws:s3:::${S3Bucket}" },
                                        { "Fn::Sub": "arn:aws:s3:::${S3Bucket}/*" }
                                    ]
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "sqs:ReceiveMessage",
                                        "sqs:DeleteMessage",
                                        "sqs:GetQueueAttributes",
                                        "sqs:SendMessage"
                                    ],
                                    "Resource": [
                                        { "Fn::GetAtt": ["DownloadQueue", "Arn"] }
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "DownloadWorkerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/ecs/download-worker",
                "RetentionInDays": 1
            }
        },
        "DownloadWorkerTaskDefinition": {
            "Type": "AWS::ECS::TaskDefinition",
            "Properties": {
                "Family": "DownloadWorkerTask",
                "RequiresCompatibilities": ["EC2"],
                "Cpu": "256",
                "Memory": "512",
                "ExecutionRoleArn": { "Ref": "ECSTaskExecutionRole" },
                "TaskRoleArn": { "Ref": "ECSTaskRole" },
                "ContainerDefinitions": [
                    {
                        "Name": "download-worker",
                        "Image": { "Ref": "DownloadWorkerImage" },
                        "Essential": true,
                        "Environment": [
                            { "Name": "BUCKET_NAME", "Value": { "Ref": "S3Bucket" } },
                            { "Name": "AWS_REGION", "Value": { "Ref": "AWS::Region" } },
                            { "Name": "DOWNLOAD_QUEUE_URL", "Value": { "Ref": "DownloadQueue" } }
                        ],
                        "LogConfiguration": {
                            "LogDriver": "awslogs",
                            "Options": {
                                "awslogs-group": { "Ref": "DownloadWorkerLogGroup" },
                                "awslogs-region": { "Ref": "AWS::Region" },
                                "awslogs-stream-prefix": "ecs"
                            }
                        }
                    }
                ]
            }
        },
        "DownloadWorkerAutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "MinSize": "1",
                "MaxSize": "1",
                "DesiredCapacity": "1",
                "LaunchTemplate": {
                    "LaunchTemplateId": { "Ref": "DownloadWorkerLaunchTemplate" },
                    "Version": { "Fn::GetAtt": ["DownloadWorkerLaunchTemplate", "LatestVersionNumber"] }
                },
                "VPCZoneIdentifier": [{ "Ref": "SubnetId" }]
            }
        },
        "DownloadWorkerLaunchTemplate": {
            "Type": "AWS::EC2::LaunchTemplate",
            "Properties": {
                "LaunchTemplateName": "DownloadWorkerLaunchTemplate",
                "LaunchTemplateData": {
                    "InstanceType": "t2.micro",
                    "IamInstanceProfile": {
                        "Name": { "Ref": "EC2InstanceProfile" }
                    },
                    "ImageId": {
                        "Fn::Sub": "{{resolve:ssm:/aws/service/ecs/optimized-ami/amazon-linux-2023/recommended/image_id}}"
                    },
                    "UserData": {
                        "Fn::Base64": {
                            "Fn::Sub": "#!/bin/bash\necho ECS_CLUSTER=${ECSCluster} >> /etc/ecs/ecs.config"
                        }
                    },
                    "InstanceMarketOptions": {
                        "MarketType": "spot",
                        "SpotOptions": {
                            "SpotInstanceType": "one-time",
                            "InstanceInterruptionBehavior": "terminate"
                        }
                    }
                }
            }
        },
        "EC2InstanceRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "ec2.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role",
                    "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
                ]
            }
        },
        "EC2InstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Roles": [{ "Ref": "EC2InstanceRole" }]
            }
        },
        "DownloadWorkerService": {
            "Type": "AWS::ECS::Service",
            "DependsOn": ["DownloadWorkerAutoScalingGroup"],
            "Properties": {
                "Cluster": { "Ref": "ECSCluster" },
                "DesiredCount": 1,
                "LaunchType": "EC2",
                "TaskDefinition": { "Ref": "DownloadWorkerTaskDefinition" }
            }
        },
        "TranscriptionLambdaLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
                "LogGroupName": "/aws/lambda/transcription-lambda",
                "RetentionInDays": 1
            }
        },
        "TranscriptionLambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": "transcription-lambda-execution-role",
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            },
                            "Action": "sts:AssumeRole"
                        }
                    ]
                },
                "Policies": [
                    {
                        "PolicyName": "transcription-lambda-policy",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "logs:CreateLogGroup",
                                        "logs:CreateLogStream",
                                        "logs:PutLogEvents"
                                    ],
                                    "Resource": "arn:aws:logs:*:*:*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:GetObject",
                                        "s3:PutObject",
                                        "s3:ListBucket"
                                    ],
                                    "Resource": [
                                        { "Fn::Sub": "arn:aws:s3:::${S3Bucket}" },
                                        { "Fn::Sub": "arn:aws:s3:::${S3Bucket}/*" }
                                    ]
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "TranscriptionLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "FunctionName": "transcription-lambda",
                "Role": { "Fn::GetAtt": [ "TranscriptionLambdaExecutionRole", "Arn" ] },
                "PackageType": "Image",
                "Code": { "ImageUri": { "Ref": "TranscriptionLambdaImage" } },
                "Timeout": 900,
                "MemorySize": 2048,
                "Environment": {
                    "Variables": {
                        "WHISPER_MODEL_PATH": { "Ref": "WhisperModelPath" }
                    }
                },
                "LoggingConfig": {
                    "LogGroup": { "Ref": "TranscriptionLambdaLogGroup" }
                }
            }
        },
        "S3InvokeTranscriptionLambdaPermission": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
                "FunctionName": { "Ref": "TranscriptionLambdaFunction" },
                "Action": "lambda:InvokeFunction",
                "Principal": "s3.amazonaws.com",
                "SourceArn": { "Fn::Sub": "arn:aws:s3:::${S3Bucket}" }
            }
        },
        "RDSSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Allow access to RDS instance",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": 5432,
                        "ToPort": 5432,
                        "CidrIp": "0.0.0.0/0"
                    }
                ]
            }
        },
        "PostgresDB": {
            "Type": "AWS::RDS::DBInstance",
            "Properties": {
                "DBName": "transcriptiondb",
                "DBInstanceIdentifier": "transcription-db",
                "DBInstanceClass": "db.t3.micro",
                "Engine": "postgres",
                "MasterUsername": "dbadmin",
                "MasterUserPassword": "dbadmin123",
                "AllocatedStorage": 20,
                "VPCSecurityGroups": [{ "Fn::GetAtt": ["RDSSecurityGroup", "GroupId"] }],
                "BackupRetentionPeriod": 0,
                "PubliclyAccessible": false,
                "MultiAZ": false,
                "EnableIAMDatabaseAuthentication": true
            }
        }
    },
    "Outputs": {
        "APIInvokeURL": {
            "Description": "Invoke this URL to submit a job",
            "Value": {
                "Fn::Sub": "https://${API}.execute-api.${AWS::Region}.amazonaws.com/prod/submit"
            }
        },
        "TranscriptionLambdaArn": {
            "Description": "ARN of the transcription lambda function",
            "Value": { "Fn::GetAtt": ["TranscriptionLambdaFunction", "Arn"] }
        }
    }
}